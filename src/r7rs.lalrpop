use std::str::FromStr;

grammar;

Token = {
    Identifier,
    Boolean,
    Number,
    Character,
    String,
    "(",
    ")",
    "#(",
    "#u8(",
    "'",
    "`",
    ",",
    ",@",
    ".",
}

Delimiter = {
    Whitespace,
    VerticalLine,
    "(",
    ")",
    "\"",
    ";",
}

Whitespace = {
    IntralineWhitespace,
    LineEnding,
}

IntralineWhitespace = {
    Space,
    Tab,
}
Space = { " " }
Tab = { "\t" }

LineEnding = {
    Newline,
    Return Newline,
    Return,
}
Newline = { "\n" }
Return = { "\r" }

VerticalLine = {
    "|",
}

Comment = {
    SemicolonComment,
    HashComment,
    "#;" IntertokenSpace Datum,
}

SemicolonComment = {
    ";" SemicolonCommentChar* LineEnding,
}

SemicolonCommentChar = {
    r"[.&&[^\n\r]*]",
}

NestedComment = {
    "#|" CommentText CommentCont* "#|",
}

CommentText = {
    r".*(?!(#\||\|#))",
}

CommentCont = {
    NestedComment CommentText,
}
Directive = {
    "#!" DirectiveChar* LineEnding,
}

DirectiveChar = {
    r"[.&&[^\n\r]*]",
}

Atomosphere = { 
    Whitespace,
    Comment,
    Directive,
}

IntertokenSpace = {
    Atomosphere*,
}

Identifier = { 
    Initial Subsequent*,
    VerticalLine SymbolElement* VerticalLine,
    PeculiarIdentifier,
}

Initial = { Letter, SpecialInitial }
Letter = { r"[a-zA-Z]" }
SpecialInitial = {
    "!",
    "$",
    "%",
    "&",
    "*",
    "/",
    ":",
    "<",
    "=",
    ">",
    "?",
    "^",
    "_",
    "~",
}

Subsequent = { Initial, Digit, SpecialSubsequent }
Digit = { r"[0-9]" }
HexDigit = { Digit, r"[a-fA-F]" }
ExplicitSign = { "+", "-" }
SpecialSubsequent = { ExplicitSign, ".", "@" }
InlineHexEscape = { "\x" HexScalarValue ";" }
HexScalarValue = { HexDigit+ }
MnemonicEscape = { r"\\[abtnr]" }

PeculiarIdentifier = { 
    ExplicitSign,
    ExplicitSign SignSubsequent, Subsequent*
    ExplicitSign "." DotSubsequent Subsequent*,
    "." DotSubsequent Subsequent*,
}

DotSubsequent = {
    SignSubsequent,
    "."
}

SignSubsequent = { 
    Initial,
    ExplicitSign,
    "@",
}

SymbolElement = {
    r"[.&&[^\\|]]",
    InlineHexEscape,
    MnemonicEscape,
    "\\|",
}

Boolean = { "#t", "#f", "#true", "#false" }

Character = {
    "#\\" AnyChar,
    "#\\" CharacterName,
    "#\\x" HexScalarValue,
}

CharacterName = {
    "alarm",
    "backspace",
    "delete",
    "escape",
    "newline",
    "null",
    "return",
    "space",
    "tab",
}

String = {
    "\"" StringElement* "\"",
}

StringElement = {
    r"[.&&[^\\\"]]",
    MnemonicEscape,
    "\\\"",
    "\\\\",
    "\\|",
    "\\" IntralineWhitespace* LineEnding IntralineWhitespace*,
    InlineHexEscape,
}

ByteVector = {
    "#u8(" Byte* ")",
}

Byte = Number

Number = {
    Num2,
    Num8,
    Num10,
    Num16,
}

NumR = { PrefixR ComplexR }
PrefixR = { 
    RadixR Exactness,
    Exactness RadixR,
}
ComplexR = { 
    RealR,
    RealR "@" RealR,
    RealR "+" URealR "i",
    RealR "-" URealR "i",
    RealR "+i",
    RealR "-i",
    RealR InfNan "i",
    "+" URealR "i",
    "-" URealR "i",
    InfNan "i",
    "+i",
    "-i",
}

RealR = { 
    Sign URealR, 
    InfNan
}

URealR = { 
    UIntegerR, 
    UIntegerR "/" UIntegerR,
    DecimalR
}

UIntegerR = { DigitR+ }

DigitR = { Digit2+, Digit8+, Digit10+, Digit16+ }


Digit2 = { r"[0-1]" }
Digit8 = { r"[0-7]" }
Digit10 = { Digit }
Decimal10 = { 
    UInteger10 Suffix, 
    "." Digit10+ Suffix,
    Digit10+ "." Digit10* Suffix,
}
Digit16 = { 
    Digit10,
     r"[a-fA-F]"
}
InfNan = { "+inf.0", "-inf.0", "+nan.0", "-nan.0" }
Suffix = { 
    Empty,
    ExponentMarker Sign Digit10+
}

ExponentMarker = { "e" }
Exactness = { "#i", "#e", Empty }
Radix2 = { "#b" }
Radix8 = { "#o" }
Radix10 = { "#d", Empty }
Radix16 = { "#x" }

Sign = { Empty, "+", "-" }

Empty = { "" }